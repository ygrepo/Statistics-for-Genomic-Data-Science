glm10 = glm(status ~ snp10, family="binomial")
tidy(glm10)
boxplot(lm2$fitted~pheno$cancer,add=T,border=1:3)
boxplot(lm2$fitted~pheno$cancer,add=T,border=1:3)
boxplot(glm10$residuals, status)
boxplot(glm10$residuals, status, add=T, border=1:2)
snp10_dom = (snp10 == 2)
glm10_dom = glm(status ~ snp10_dom, family="binomial")
tidy(glm10_dom)
boxplot(glm10_dom$residuals, status, add=T, border=1:2)
par(mfrow=c(1,2))
boxplot(glm10$residuals, status, add=T, border=1:2)
boxplot(glm10_dom$residuals, status, add=T, border=1:2)
dim(snpdata)
# fit an additive logistic regression model to each SNP
results = rep(NA, dim(snpdata)[2])
rep(NA, dim(snpdata)
dim(snpdata)[2]
library(snpStats)
library(broom)
data(for.exercise)
use <- seq(1, ncol(snps.10), 10)
sub.10 <- snps.10[,use]
snpdata = sub.10@.Data
status = subject.support$cc
# fit an additive logistic regression model to each SNP
results = rep(NA, dim(snpdata)[2])
for (i in 1:ncol(snpdata)){
snpdata_i = as.numeric(snpdata[,i])
snpdata_i[snpdata_i == 0] = NA
glm_i = glm(status ~ snpdata_i, family = "binomial")
results[i] = tidy(glm_i)$statistic[2]
}
# average effect size
mean(results)
# minimum effect size
min(results)
# maximum effect size
max(results)
# fit a logistic regression model
snp10 = as.numeric(snpdata[,10])
snp10[snp10==0] = NA
glm10 = glm(status ~ snp10, family="binomial")
tidy(glm10)
tidy(glm10)$statistic
tidy(glm10)$statistic[2]
??stats:glm
??stats::glm
??tidy
??tidy$statistics
??broom::tidy
library(snpStats)
library(broom)
data(for.exercise)
use <- seq(1, ncol(snps.10), 10)
sub.10 <- snps.10[,use]
snpdata = sub.10@.Data
status = subject.support$cc
# fit an additive logistic regression model to each SNP
results = rep(NA, dim(snpdata)[2])
for (i in 1:ncol(snpdata)){
snpdata_i = as.numeric(snpdata[,i])
snpdata_i[snpdata_i == 0] = NA
glm_i = glm(status ~ snpdata_i, family = "binomial")
results[i] = tidy(glm_i)$estimate[2]
}
results_coeff_square =  results^2
glm_all = snp.rhs.tests(status ~ 1, snp.data = sub.10)
glm_all
chi.squared(glm_all)
glm_all = snp.rhs.tests(status ~ 1, snp.data = sub.10)
cor(results_coeff_squre, chi.squared(glm_all))
cor(results_coeff_square, chi.squared(glm_all))
# fit an additive logistic regression model to each SNP
results = rep(NA, dim(snpdata)[2])
for (i in 1:ncol(snpdata)){
snpdata_i = as.numeric(snpdata[,i])
snpdata_i[snpdata_i == 0] = NA
glm_i = glm(status ~ snpdata_i, family = "binomial")
#results[i] = tidy(glm_i)$estimate[2]
results[i] = tidy(glm_i)$statistic[2]
}
# square the coefficients
results_coeff_square =  results^2
# correlation with the results from using snp.rhs.tests and chi.squared
glm_all = snp.rhs.tests(status ~ 1, snp.data = sub.10)
cor(results_coeff_square, chi.squared(glm_all))
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
edata = log2(as.matrix(edata) + 1)
## ------------------------------------------------------------------------
tstats_obj = rowttests(edata,pdata$strain)
tstats_obj = genefilter::rowttests(edata,pdata$strain)
library(genefilter)
tstats_obj = genefilter::rowttests(edata,pdata$strain)
edata
## ----global_palette, results = 'asis'------------------------------------
rm(list=ls())
tropical=  c('darkorange', 'dodgerblue', 'hotpink', 'limegreen', 'yellow')
palette(tropical)
## ----global_options,warning=FALSE,message=FALSE--------------------------
## see ch. 10 Hooks of Xie's knitr book
library(knitr)
knit_hooks$set(setPch = function(before, options, envir) {
if(before) par(pch = 19)
})
opts_chunk$set(setPch = TRUE)
## ----global_plot,warning=FALSE, message=FALSE----------------------------
knitr::opts_chunk$set(fig.width=5, fig.height=5, size="footnotesize",
warning=FALSE, message=FALSE)
knitr::knit_hooks$set(small.mar = function(before, options, envir) {
if (before) graphics::par(mar = c(5,5,1.5,1))
})
## ----load_hidden, echo=FALSE, results="hide", warning=FALSE--------------
suppressPackageStartupMessages({
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
})
## ----load----------------------------------------------------------------
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
## ----install_packages, eval=FALSE----------------------------------------
#  install.packages(c("devtools"))
#  source("http://www.bioconductor.org/biocLite.R")
#  biocLite(c("Biobase","limma","genefilter","jdstorey/edge"))
## ------------------------------------------------------------------------
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
bot = bottomly.eset
pdata=pData(bot)
edata=as.matrix(exprs(bot))
fdata = fData(bot)
ls()
## ------------------------------------------------------------------------
edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]
## ------------------------------------------------------------------------
tstats_obj = rowttests(edata,pdata$strain)
names(tstats_obj)
hist(tstats_obj$statistic,col=2)
## ------------------------------------------------------------------------
fstats_obj = rowFtests(edata,as.factor(pdata$lane.number))
names(fstats_obj)
hist(fstats_obj$statistic,col=2)
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]
## ------------------------------------------------------------------------
tstats_obj = genefilter::rowttests(edata,pdata$strain)
names(pdata)
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
ibrary(ballgown)
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
library(ballgown)
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
#
# con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
# load(file=con)
# close(con)
# mp = montpick.eset
# pdata=pData(mp)
# edata=as.data.frame(exprs(mp))
# fdata = fData(mp)
edata = log2(as.matrix(edata) + 1)
## ------------------------------------------------------------------------
tstats_obj = genefilter::rowttests(edata,pdata$population)
names(tstats_obj)
#hist(tstats_obj$statistic,col=2)
## ------------------------------------------------------------------------
fstats_obj = rowFtests(edata,as.factor(pdata$population))
names(fstats_obj)
#hist(fstats_obj$statistic,col=2)
par(mfrow=c(1,2))
hist(tstats_obj$statistic, col=2)
hist(fstats_obj$statistic, col=2)
tstats_obj$p.value
fstats_obj$p.value
par(mfrow=c(1,2))
hist(tstats_obj$p.value, col=2)
hist(fstats_obj$p.value, col=2)
par(mfrow=c(1,2))
hist(tstats_obj$statistic, col=2)
hist(fstats_obj$statistic, col=2)
rm(list=ls())
library(devtools)
library(Biobase)
library(snpStats)
library(broom)
library(MASS)
library(DESeq2)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
edata = edata[rowMeans(edata) > 100,]
fdata = fData(mp)
names(pdata)
de = DESeqDataSetFromMatrix(edata, pdata, ~study)
glm_all_nb = DESeq(de)
result_nb = results(glm_all_nb)
hist(result_nb$stat)
mod = model.matrix(~ pdata$population)
fit_limma = lmFit(edata,mod)
ebayes_limma = eBayes(fit_limma)
limma_pvals = topTable(ebayes_limma,number=dim(edata)[1])$P.Value
hist(limma_pvals,col=4)
result_nb$pvalue
dim(result_nb$pvalue)
de = DESeqDataSetFromMatrix(edata, pdata, ~study)
glm_all_nb = DESeq(de)
result_nb = results(glm_all_nb)
hist(result_nb$stat)
mod = model.matrix(~ pdata$study)
fit_limma = lmFit(edata,mod)
ebayes_limma = eBayes(fit_limma)
limma_pvals = topTable(ebayes_limma,number=dim(edata)[1])$P.Value
hist(limma_pvals,col=4)
de = DESeqDataSetFromMatrix(edata, pdata, ~study)
glm_all_nb = DESeq(de)
result_nb = results(glm_all_nb)
#hist(result_nb$stat)
# using limma test the differences
edata = log2(as.matrix(edata) + 1)
mod = model.matrix(~ as.factor(pdata$study))
fit_limma = lmFit(edata,mod)
ebayes_limma = eBayes(fit_limma)
limma_pvals = topTable(ebayes_limma,number=dim(edata)[1])$P.Value
#hist(limma_pvals,col=4)
cor(result_de$stat, top$t)
top = topTable(ebayes_limma,number=dim(edata)[1], sort.by="none")
top$t
# correlation in the statistics between two analyses
cor(result_de$stat, top$t)
cor(result_nb$stat, top$t)
rm(list=ls())
library(devtools)
library(Biobase)
library(snpStats)
library(broom)
library(MASS)
library(DESeq2)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
edata = edata[rowMeans(edata) > 100,]
fdata = fData(mp)
de = DESeqDataSetFromMatrix(edata, pdata, ~study)
glm_de = DESeq(de)
result_de= results(glm_de)
#hist(result_nb$stat)
# using limma test the differences
edata = log2(as.matrix(edata) + 1)
mod = model.matrix(~ as.factor(pdata$study))
fit_limma = lmFit(edata,mod)
ebayes_limma = eBayes(fit_limma)
top = topTable(ebayes_limma,number=dim(edata)[1], sort.by="none")
# correlation in the statistics between two analyses
cor(glm_de$stat, top$t)
cor(result_de$stat, top$t)
??cbind
y = cbind(result_de$stat, top$t)
limma::plotMA(y)
y
library(qvalue)
fp_bonf = p.adjust(result_de$pvalue,method="bonferroni")
hist(fp_bonf,col=3)
quantile(fp_bonf)
sum(fp_bonf)
fp_bonf_de = p.adjust(result_de$pvalue,method="bonferroni")
hist(fp_bonf_de,col=3)
quantile(fp_bonf_de)
fp_bonf_limma = p.adjust(top$P.Value,method="bonferroni")
hist(fp_bonf_limma,col=3)
quantile(fp_bonf_limma)
sum(fp_bonf_limma)
sum(fp_bonf_de < 0.05)
sum(fp_bonf_limma < 0.05)
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
library(qvalue)
browseVignettes(package = "qvalue")
data(hedenfalk)
names(hedenfalk)
hedenfalk
null_stats <- hedenfalk$stat0
obs_stats <- hedenfalk$stat
pvalues <- empPvals(stat = obs_stats, stat0 = null_stats,
pool = FALSE)
?empPvals
library(devtools)
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
rm(list=ls())
library(devtools)
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
geneAnnotation
geneExpression
sampleInfo
dim(geneExpression
)
head(sampleInfo)
sampleInfo$data == 2005-06-27
sampleInfo$data == '2005-06-27'
sampleInfo[sampleInfo$date == "2005-06-27"]
sampleInfo$date == "2005-06-27"
class(sampleInfo)
sampleInfo[sampleInfo$date == "2005-06-27"]
sampleInfo[sampleInfo$date == '2005-06-27']
sampleInfo$date
sampleInfo$date == "2005-06-27"
sampleInfo[sampleInfo$date == "2005-06-27"]
sampleInfo[sampleInfo$group == 1]
sampleInfo[sampleInfo$date == "2005-06-27",]
?nrow
nrow(sampleInfo[sampleInfo$date == "2005-06-27",])
head(match(geneAnnotation$PROBEID,rownames(geneExpression)))
class(geneAnnotation)
class(geneExpression)
head(geneExpression)
geneAnnotation#CHR
geneAnnotation$CHR
distinct(geneAnnotation$CHR)
unique(geneAnnotation$CHR)
geneAnnotation$CHR == "chrY"
geneAnnotation[geneAnnotation$CHR == "chrY",]
na.omit(geneAnnotation[geneAnnotation$CHR == "chrY",])
chry_annot <- na.omit(geneAnnotation[geneAnnotation$CHR == "chrY",])
head(match(chry_annot$PROBEID,rownames(geneExpression)))
match(chry_annot$PROBEID,rownames(geneExpression)
)
head(geneExpression)
sum(match(chry_annot$PROBEID,rownames(geneExpression)))
sum(match(chry_annot$PROBEID,rownames(geneExpression)))
sum(chry_annot)
chry_annot
sum(chry_annot$PROBEID)
nrow(chry_annot$PROBEID)
nrow(chry_annot)
unique(geneAnnotation$SYMBOL)
ARPC1A <- geneAnnotation[geneAnnotation$SYMBOL == "ARPC1A",]
View(ARPC1A)
View(ARPC1A)
ARPC1A <- na.omit(geneAnnotation[geneAnnotation$SYMBOL == "ARPC1A",])
View(ARPC1A)
match(geneAnnotation$PROBEID,rownames(geneExpression))
match(geneAnnotation$PROBEID,rownames(ARPC1A))
View(ARPC1A)
match(ARPC1A$PROBEID,rownames(geneExpression))
View(geneExpression)
geneExpression$row
geneExpression$rowname
geneExpression[rownames(geneExpression) == ARPC1A$PROBEID]
View(geneExpression)
View(geneExpression)
geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID)]
rownames(geneExpression) == ARPC1A$PROBEID
geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID),]
View(sampleInfo)
geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID)]
geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID), ]
geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID), 0]
geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID),c(1)]
colnames(geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID),])
colnames(geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID)])
colnames(geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID),])
tmp <- geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID), ]
class(tmop)
class(tmp)
type(tmp)
geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID), ]
names(tmp)
tmp <- names(geneExpression[rownames(geneExpression) %in% c(ARPC1A$PROBEID), ])
sampleInfo[sampleInfo$filename %in% tmp, ]
sampleInfo[sampleInfo[sampleInfo$filename %in% tmp, ]$date == "2005-06-27",]
sampleInfo[sampleInfo[sampleInfo$filename %in% tmp, ]$date == "2005-06-10",]
thepatient <- sampleInfo[sampleInfo[sampleInfo$filename %in% tmp, ]$date == "2005-06-10",]$filename
View(geneExpression)
geneExpression[colnames(geneExpression) == thepatient]
View(ARPC1A)
geneExpression[rownames(geneExpression[colnames(geneExpression) == thepatient]) == ARPC1A$CHR,]
geneExpression[rownames(geneExpression[colnames(geneExpression) == thepatient]) == ARPC1A$CHR,]
geneExpression[colnames(geneExpression) == thepatient]rownames(geneExpression[colnames(geneExpression) == thepatient]) == ARPC1A$CHR
rownames(geneExpression[colnames(geneExpression) == thepatient]) == ARPC1A$CHR
rownames(geneExpression[colnames(geneExpression) == thepatient])
geneExpression[rownames(geneExpression[colnames(geneExpression) == thepatient]
]
geneExpression[rownames(geneExpression[colnames(geneExpression) == thepatient,]
geneExpression[geneExpression[colnames(geneExpression) == thepatient,]
geneExpression[colnames(geneExpression) == thepatient,]
geneExpression[colnames(geneExpression) == thepatient]
geneExpression[,geneExpression[colnames(geneExpression) == thepatient]]
geneExpression[,geneExpression[colnames(geneExpression) == thepatient]
geneExpression[geneExpression[colnames(geneExpression) == thepatient]
geneExpression[geneExpression[colnames(geneExpression) == thepatient]]
View(geneExpression)
geneExpression[geneExpression[rownames(geneExpression) == ARPC1A],
geneExpression[colnames(geneExpression) == thepatient]]
geneExpression[colnames(geneExpression) == thepatient]
geneExpression[rownames(geneExpression) == ARPC1A]
geneExpression[geneExpression[rownames(geneExpression) == ARPC1A$PROBEID],
geneExpression[colnames(geneExpression) == thepatient]]
geneExpression[rownames(geneExpression) == ARPC1A$PROBEID]
View(ARPC1A)
View(ARPC1A)
geneExpression["200950_at",thepatient]
geneExpression[ARPC1A$PROBEID,thepatient]
i = which(geneAnnotation$SYMBOL=="ARPC1A")
j = which(sampleInfo$date=="2005-06-10")
geneExpression[i,j]
View(geneAnnotation)
View(geneExpression)
colMedians(geneExpression)
apply(geneExpression[,-1], 1, median)
apply(geneExpression[-1,], 1, median)
apply(geneExpression[,-1], 1, median)
median(apply(geneExpression[,-1], 1, median))
meds <- apply(geneExpression,2,median)
?apply
meds <- apply(geneExpression,2,median)
median(meds)
g <- factor(sampleInfo$group)
t.test( g[group==1], g[group==0])$p.value
t.test( geneExpression[g==1], geneExpression[g==0])$p.value
RNGkind()
geneExpression[g==1]
View(geneExpression)
View(sampleInfo)
sampleInfo[sampleInfo$group == 1]
sampleInfo[sampleInfo$group == 1,]
g
g <- factor(sampleInfo$group)
mttest <- function(e) {
return (t.test(e[g==0], e[g==1])$p.value)
}
apply(geneExpression,1,mttest)
ttests <- apply(geneExpression,1,mttest)
sort(ttests)
sort(ttests)[0]
sort(ttests)[0,]
order(ttests)
sort(ttests)[[0]]
sort(ttests)
sort(ttests)[0]
sort(ttests)[0,]
sort(ttests),[0]
sort(ttests)[0,0]
ttests[order(ttests)]
ttests[order(ttests)][]
ttests[order(ttests)][0]
ttests[order(ttests)][1]
pVals=apply(geneExpression,1,myttest) # "1" because we act on each row
pVals=apply(geneExpression,1,mttest) # "1" because we act on each row
min(pVals)
hist(pVals)
